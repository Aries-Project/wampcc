
PROGRESS
========


NEXT:




13/02/16

Changed how yield messages are routed to a callback (this is on the dealer
side).  Previously I was passing pointers around to the user callback object,
and then invoking that from inside the event loop.  New approach is a double
lookup (so not the most efficient).  But is simpler.  Whe a user uses the dealer
aoi ti make a call, that creates an internal request id, whcih is used inside
the dealer level to store the pending request.  The Session know only knows
about that ID, and the event loop just dispatches the YIELD event into the
dealer api where is does the lookup (on the internal req id), and then calls the
user callback.  Perhaps later, could put in a shared_ptr for this. Will see how
it develops.



TASKS
=====

NEXT

* need to plan for the session closure.  Need a design, and best thing is to go
  for something predictable, which means choosing either the IO thread, or, the
  event thread.  And, because the IO thread can definitely be a source of
  closure, it means that we have to really chose the IO thread as the one whcih
  is alwasysingoingto perfomr the session lsouse.

* in the client, need to handle the event of a peer disconnecting.  There are
  various data structures that need to be updated, such at, in the client, the
  procedure registration table.

* remove tcp conn stuff, and uv stuff, from client_service, and it is a source
  fo leak

* remove tcp conn stuff, and uv stuff, from dealer_service, and it is a source
  fo leak

* there is a memory leak in the client side.  Could be the session objects?
  -> add times to the Session
  -> then do time expirey cleanup in the SessionMan

* in current client.cc, there is no way to allow multile repleis, since the
  admin side will terminate the main connection as soon as the first reply
  arrives.
